services:  
  postgres:
    image: postgres:15
    container_name: workflow-db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${WORKFLOW_DB_USER}
      POSTGRES_PASSWORD: ${WORKFLOW_DB_PASSWORD}
      POSTGRES_DB: ${WORKFLOW_DB_NAME}
      # Additional Postgres configuration via environment variables
    ports:
      - "5435:5432"
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - postgres-logs:/var/log/postgresql
    command: >
      postgres -c logging_collector=on
               -c log_directory='/var/log/postgresql'
               -c log_filename='postgresql-%Y-%m-%d_%H%M%S.log'
               -c log_statement='ddl'
               -c log_min_messages='info'
               -c log_min_error_statement='info'
               -c log_min_duration_statement=0
               -c log_line_prefix='%m [%p]: [%l-1] user=%u,db=%d '
               -c listen_addresses='*'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${WORKFLOW_DB_USER} -d ${WORKFLOW_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: crms-controller-redis
    ports:
      - "6379:6379"
    env_file:
      - .env
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  node:
    image: ghcr.io/brogleyr/base-controller-node:nhcs # Use your GHCR image
    container_name: base-controller-app
    ports:
      - "3000:3000" # Expose the Node.js app on port 3000
    env_file:
      - .env
    environment:
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - sis-upload-data:/usr/src/app/uploads

volumes:
  postgres-data:
  postgres-logs:
  redis-data:
  sis-upload-data:
